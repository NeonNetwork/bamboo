stages:
  - test
  - deploy

# rust-latest-test:
#   stage: test
#   image: rust:latest
#   script:
#     - cargo test --verbose
#
# rust-nightly-test:
#   stage: test
#   image: rustlang/rust:nightly
#   script:
#     - cargo test --verbose

pages:
  stage: deploy
  image: rustlang/rust:nightly
  script:
    - cargo run --bin sc_server -- --only-docs
    - mkdir -p public/
    - rm -rf public/*
    - cp -r target/sl_docs/* public/
  artifacts:
    paths:
    - public

# See https://www.collabora.com/news-and-blog/blog/2021/03/24/rust-integrating-llvm-source-base-code-coverage-with-gitlab/
coverage:
  stage: deploy
  image: "rustdocker/rust:nightly"
  stage: extras
  variables:
    RUSTFLAGS: "-Zinstrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - rustup component add llvm-tools-preview
    - cargo test
      # generate html report
    - cargo install grcov
    - grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --ignore "*cargo*" -o ./coverage/
      # generate cobertura report for gitlab integration
    - pip3 install lcov_cobertura
    - grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
    - python3 /usr/local/lib/python3.5/dist-packages/lcov_cobertura.py coverage.lcov
      # output coverage summary for gitlab parsing
    - apt-get update && apt-get install -y lcov
    - lcov --summary coverage.lcov
  artifacts:
    paths:
      - 'coverage'
    reports:
      cobertura: coverage.xml
