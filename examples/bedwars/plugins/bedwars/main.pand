use bamboo::{
  chat::Chat,
  util::FPos,
}

struct Bedwars {
  teams: map,
  players: map,
}
struct Team {
  players: arr,
  spawn: Pos,
  spawn_yaw: float,
}

fn init() {
  bamboo::info("initializing bedwars")

  teams = map {
    "red":    Team { players: [], spawn: FPos::new(0.0,   61.0, -40.0), spawn_yaw: 0.0 },
    "green":  Team { players: [], spawn: FPos::new(40.0,  61.0, 0.0  ), spawn_yaw: 90.0 },
    "aqua":   Team { players: [], spawn: FPos::new(0.0,   61.0, 40.0 ), spawn_yaw: 180.0 },
    "yellow": Team { players: [], spawn: FPos::new(-40.0, 61.0, 0.0  ), spawn_yaw: 270.0 },
  }
  bb = bamboo::instance()
  bb.store(Bedwars {
    teams: teams,
    players: map {},
  })
}

fn start_game(bb) {

}

fn on_click_window(player, slot, mode) {
  true
}

fn on_block_place(player, pos, kind) {
}

fn on_player_join(player) {
  bb = bamboo::instance()
  bedwars = bb.lock()

  team = bedwars.find_smallest_team()
  bamboo::info("Adding " + player.username() + " to " + team)
  bedwars.add_player_to_team(player, team)
  bedwars.teleport_to_spawn(player)

  bb.unlock(bedwars)
}

fn teleport_to_spawn(player) {
  bb = bamboo::instance()
  teams = bb.lock()
  smallest_size = 100
  smallest_team = ""
  keys = teams.keys()
  for i = 0, i < teams.len(), i++ {
    color = keys[i]
    if teams[color].players.len() < smallest_size {
      smallest_team = color
      smallest_size = teams[color].players.len()
    }
  }
  bb.unlock(teams)
}

impl Bedwars {
  fn teleport_to_spawn(self, player) {
    team = self.teams[self.players[player.username()]]
    player.teleport(team.spawn, team.spawn_yaw, 0.0)
  }

  fn find_smallest_team(self) {
    smallest_size = 100
    smallest_team = ""
    keys = self.teams.keys()
    for i = 0, i < self.teams.len(), i++ {
      color = keys[i]
      if self.teams[color].players.len() < smallest_size {
        smallest_team = color
        smallest_size = self.teams[color].players.len()
      }
    }
    smallest_team
  }

  fn add_player_to_team(self, player, team) {
    line = Chat::new("Team: ")
    line.add(team).color(team)
    player.show_scoreboard()
    player.set_scoreboard_line(1, line)
    name = Chat::empty()
    name.add(player.username()).color(team)
    player.set_display_name(name)

    self.teams[team].players.push(player)
    self.players.insert(player.username(), team)
  }
}
